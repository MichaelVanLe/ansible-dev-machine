# Setp 4.2: Install Elixir and Erlang
# actions only work with macOS
# Tester
- hosts: localhost
  
  vars_prompt:
  - name: password
    prompt: what is your password?
    # avoids recording sensitive data
    private: yes

  tasks:
  # - name: Show facts available on the system
  #   ansible.builtin.debug:
  #     var: ansible_facts

  - name: list installed plugins
    ansible.builtin.shell: asdf plugin list
    register: pluginlist
    # can't run conditional on plugin that doesn't exist (plugin undefined)
    # ran for first time when 'or pluginlist.rc !=0' doesn't run again after initial
    # failed_when: pluginlist.stderr.find('No plugins installed') == -1
    # failed_when: "'' in pluginlist.stderr"
    # goal is to have it fail never. Fails when doesn't say 'No plugins installed' and pluginlist.rc !=0 
    failed_when: pluginlist.stderr.find('No plugins installed') == -1 and pluginlist.rc != 0

  - name: print installed plugins
    ansible.builtin.debug:
      msg: List of installed plugins {{ pluginlist }}

  - name: Erlang plugin add
    # shell module runs command through a shell on the remote node
    # for windows targets use: ansible.windows.win_shell
    ansible.builtin.shell: asdf plugin-add erlang
    # ignores errors
    # ignore_errors: yes
    register: erlangpluginadd
    # execute comment if erlang not found in installed plugins list
    when: pluginlist.stdout.find('erlang') == -1

  - name: Elixir plugin add
    ansible.builtin.shell: asdf plugin-add elixir
    # ignore_errors: yes
    register: elixirpluginadd
    when: pluginlist.stdout.find('elixir') == -1

  - name: export kerl config options
    # replace following 
    # ansible.builtin.shell: export KERL_CONFIGURE_OPTIONS="--without-javac --with-ssl=$(brew --prefix openssl)"
    # with this below openssl@1.1
    ansible.builtin.shell: export KERL_CONFIGURE_OPTIONS="--without-javac --with-ssl=$(brew --prefix openssl@1.1)"

  # get macos version since Erlang different install process catalina vs big sur
  # if version 11 or greater --> big sur
  - name: get macOS version
    ansible.builtin.shell: sw_vers -productVersion
    register: osversion

  - name: print macOS version
    ansible.builtin.debug:
      msg: macOS Version {{ osversion.stdout_lines }}

  # match start of string with 11 - https://docs.ansible.com/ansible/latest/user_guide/playbooks_tests.html#testing-strings
  - name: is os big sur?
    ansible.builtin.debug:
      msg: I am OS Big Sur Version
    # give it the ol' double escape \\
    when: osversion.stdout_lines is match("\\['11.")

  # Follow these steps - https://github.com/asdf-vm/asdf-erlang/issues/195#issuecomment-849110313 
  # erlang 22.3 can only be installed with autoconf@2.6
  - name: install autoconf@2.69
    ansible.builtin.shell: brew install autoconf@2.69
    when: osversion.stdout_lines is match("\\['11.")

  - name: brew link autoconf@2.69
    ansible.builtin.shell: brew link --overwrite autoconf@2.69
    when: osversion.stdout_lines is match("\\['11.")

  - name: erlang install on Big Sur
    ansible.builtin.shell: asdf install erlang 22.3
    when: osversion.stdout_lines is match("\\['11.")

  # standard instalation on catalina
  - name: erlang install on Catalina
    ansible.builtin.shell: asdf install erlang 22.3
    register: erlanginstall
    when: osversion.stdout_lines is match("\\['10.")

  - name: elixir install
    ansible.builtin.shell: asdf install elixir 1.10.3
    register: elixirinstall
    ignore_errors: yes

  # failed - only on replacement MacBook Pro
  - name: asdf install
    ansible.builtin.shell: asdf install
    register: asdfinstall
    # temporary ignore_errors
    # ignore_errors: yes

  # set env variables in .bashprofile
  - name: export api_host
    ansible.builtin.shell: export API_HOST="http://localhost:3030"
    
  - name: export api_host_test
    ansible.builtin.shell: export API_HOST_TEST="http://localhost:3030"
    
# install fails and stops when there is an error.
# current error: "stderr": "Plugin named erlang already added"

# run a check to see if it's installed or suppress errors
# run 'elixir -v' and set it as a variable (register)
# The way you solve is not as imp as the result

# if non zero result than this or maybe find out what rc 2 is. If plugin already
# installed then we want to continue/skip/ignore
# need to use a when
